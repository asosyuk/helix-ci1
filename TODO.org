
This development reflects authors' Coq learning journey and contains a
lot of an inelegant and redundant code. Additionally, it includes some
workarounds for bugs and limitations for older Coq versions (starting
from 8.4).

It is overdue for serious refactoring and cleanup. Amongst other things:

* Refactoring
** Some other cleanup opportunities are marked with "TODO" comments
** Rename =eT= and =eUnion= to =Embed= and =Pick=
** Probably "SUM" shoud be avoided in the name =HTSumUnion= not to confuse
  with =ISUmUnion=.
** Rename =Diamond= to =MR=
** Many usused definitions could be removed. (Hint: try =make print-unused=)
** It looks like =Apply_Family= never used directly. Just =Apply_Family'=.
   We probably need just one definition.
** Rename implementations named =foo'= into =foo_Impl= in /SigmaHCOLImpl.v/.
  For example =eT'= should become =eT_impl=
** Run =coq-min-imports= on all codebase
** GEP definition in Coq

* Harmonization
** =IReduction= constraints:
  =IReduction= have 2 'compat' assumptions. We have =BFixpoint= in
  =SHOperator= instanct and dense body assumption in =IRedution_Mem=.
  This nees to be normalized.

** =RMonoid= vs =Monoid= 
   Whenever we us =Monoid= as pre-condition for rewriting we should use
   =RMnonoid= which is more general.

** =SHOpeator= constraints:
  For =svalue_at_sparse= we need =szero= to be a fixpoint of =dot=
  (with 2 arguments). For =SHOperator_Mem= we need a =Monoid= which is
  a superset of that. 

* Proof mechanics
** Review =_arg_proper= vs =_proper= instances
** Proof-irrelevance assumption could be avoided
* Unfinished
** Automate /DynWin/ rewriting proof
** Automate SPIRAL log reading for sequence of rewrites
   Perhaps using TemplateCoq?
** =maxnum=  implementation
   Currently implemented as C =max= macro. Should be more
   like =fmax= https://en.cppreference.com/w/c/numeric/math/fmax
   LLVM ref: https://llvm.org/docs/LangRef.html#llvm-maxnum-intrinsic
* Ideas
  - See if =coq-equations= package could be used to represent index
    functions and function arguments of =BinOp=, =Pointwise=, etc.

