
This development reflects author's Coq learning journey and contains a
lot of an inelegant and redundant code. Additionally, it includes some
workarounds for bugs and limitations for older Coq versions (starting
from 8.4).

It is overdue for serious refactoring and cleanup. Amongst other things:

* Refactoring
** Some other cleanup opportunities are marked with "TODO" comments
** Probably "SUM" shoud be avoided in the name =HTSumUnion= not to confuse
  with =ISUmUnion=.
** Rename =Diamond= to =MR= :zoickx:
** Many unused definitions could be removed. (Hint: try =make print-unused=) :zoickx:
** It looks like =Apply_Family= never used directly. Just =Apply_Family'=.     :zoickx:
   We probably need just one definition. 
** Run =coq-min-imports= on all codebase                               :zoickx:
** GEP definition in Coq
** FMap equality                                                     :zoickx:
   We have now defined setoid equiality for =mem_block= and =memory==.
   These are pretty much boilderplate, assuming =Equality= on the
   values. Perhaps these 2 could be generalized via typeclass or a
   module.
** Split StringOT.v into several files                               :zoickx:
   Remove if unecessary.
** Move =CarrierAabs_proper= to =CarrierType.v=                          :zoickx:
** Move operations on CType to CType module like we did with NType
* Harmonization
** =RMonoid= vs =Monoid= 
   Whenever we us =Monoid= as pre-condition for rewriting we should use
   =RMnonoid= which is more general.
** ~BFixpoint~ follows from ~Monoid~                                     :zoickx:
   Whenever we aleady have ~Monoid~, ~BFixPoint~ could be derived from that
   and should not be assumed implicitly.
* Proof mechanics
** Review =_arg_proper= vs =_proper= instances                           :zoickx:
   Check all ~Proper~ instances and if there more than one for some function
   see if they could be merged.
** ~FinNatSet~ proofs automation via [[https://gmalecha.github.io/reflections/2017/speeding-up-proofs-with-computational-reflection][computational reflection]]
   (for automatic obligations resoluition in SHCL/MSHCOL/DSHCOL/
   equality).
** Tactic =solve_facts= in =DynWinProof= is hacky and slow.
   - Need more precise matching of goals
   - Can use ~eauto~ instead of matching
   - Can use =typeclasses_eauto= to find some instances
** Automation for proofs like ~DynWin_pure~.
   Current proof automation of ~MSH_DSH_compat~ doesn not extend to some
   steps of initializing memory and environment with global variables.

   This is not done, because we need universally quantify all proofs
   over globals. Now it is manually done (in a ~Section~). It is possible
   to fully automate this by generating the lemma with Template-Coq.

   This step is trivial, and postponed for later. We also took the same
   approch with SHCOL proofs.

   ~DSH_Pure~ instances do not have this problem as do not depend on
   globals, env, memory. They only depend on the DSH operator intself
   and ~x_p~ and ~y_p~. Although due to memory layout, ~x_p~ and ~y_p~ do
   depend on number of globals before them, but this is could be
   computed by size of globals array returned by Template-Coq. This
   step is fully automated now.
   
* Unfinished
** ~IReduction 0~
   According to Franz ~IReduction 0~ should initialize output vector
   with initial value. Unfortunately this is not how it is implemented
   in SHCOL and subseqently in MHCOL. The problem stems from the fact
   that in SHCOL we shared the same underlying implementation function
   called ~Diamond~ between ~IUnion~ and ~IReduction~. They are indeed
   implemented very similarly, but in case of ~IReduction~ default
   initilizatio values should not be /structural/. Current MSHCOL->DHCOL
   compiler implment this incorrect semantics (for =n=0=). It is a special
   case and we do not expect it to appear in normal programs, but for
   consistency in future we should fix ~IReduction~ definition from
   SHCOL upwards to initilize with non-structural values.
** =DSHAlloc= memory size is not tracked and enforced. 
   Probably not a problem for DSHCOL as memory blocks are of infinite
   size, but could be an issue later for LLVM codegen.
   Note: Itrees semantics for DHCOL tracks memory size in denotation.
** Automate /DynWin/ rewriting proof 
   Ltac automation in ~DynWinSigmaHCOL1_Value_Correctness~
** Automate SPIRAL log reading for sequence of rewrites
   Perhaps using TemplateCoq?
** LLVM Code generation
*** Implement float min/max                                          :zoickx:
    in DHCOL it is ~~Float64Min~ and ~Float64Max~.

    In LLVMgen ~Float_maxnum~ implemented as C ~max~ macro. Should be more
    like ~fmax~ https://en.cppreference.com/w/c/numeric/math/fmax
    LLVM ref: https://llvm.org/docs/LangRef.html#llvm-maxnum-intrinsic

    ~Float_maxnum~ is the same as ~Float64Max~
*** Implemnet int min/max
    in ~LLVMGen/Compiler.v~ in ~genNExpr~ implement min/max code generation for integers.
    [[https://lists.llvm.org/pipermail/llvm-dev/2016-November/106868.html][related discussion]]
** Pretty printing
   How there is an assortment of functions like =string_of_DSHOperator=
   =string_of_vars= and =string_of_PExpr=. Consider using
   =ExtLib.Programming.Show= typeclass intances instead.

   An alternative approach would be to use =sexp= serialization
   via [[https://github.com/Lysxia/coq-ceres][coq-ceres]], as it was chosen by Vellvm. See
   related [[https://harry.garrood.me/blog/down-with-show-part-3/][blog post]].
* Build/Tests
** Use =dune= for coq code builds
** Use ~install-deps~ from ~Makefile~ :zoickx:
   - Update ~Makefile~
   - Reference in ~README.org~
** Use =coq-struct-tact= package                                     
   Instead of local copy we have in =Tactics/StructTactics.v=
   But we beed to wait until it become avaialble in default repo.
   Track this [[https://github.com/uwplse/StructTact/issues/55][issue]] for details.
** Use [[https://github.com/QuickChick/QuickChick][QuickChick]]
* Ideas
** Use =coq-equations= package.
   It could be used to represent index functions and function
   arguments of =BinOp=, =Pointwise=, etc.

