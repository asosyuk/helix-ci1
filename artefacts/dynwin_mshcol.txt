dynwin_MSHCOL1 = 
λ a : vector CarrierA 3, MSigmaHCOL.MSHCompose MSigmaHCOL.MSHBinOp
                           (MSigmaHCOL.MHTSUMUnion plus
                              (MSigmaHCOL.MSHCompose
                                 (MSigmaHCOL.MSHeUnion (le_S (le_n 1)))
                                 (MSigmaHCOL.MSHIReduction 0
                                    (λ jf : FinNat 3, MSigmaHCOL.MSHCompose
                                                        (MSigmaHCOL.MSHCompose
                                                          MSigmaHCOL.MSHPointwise
                                                          (MSigmaHCOL.MSHInductor
                                                          (` jf) 1))
                                                        (MSigmaHCOL.MSHEmbed
                                                          (GathH1_domain_bound_to_base_bound
                                                          (h_bound_first_half 1 4))))))
                              (MSigmaHCOL.MSHCompose (MSigmaHCOL.MSHeUnion (le_n 2))
                                 (MSigmaHCOL.MSHIReduction 0
                                    (λ jf : FinNat 2, MSigmaHCOL.MSHCompose
                                                        MSigmaHCOL.MSHBinOp
                                                        (MSigmaHCOL.MSHIUnion
                                                          (λ jf0 : FinNat 2, 
                                                          MSigmaHCOL.MSHCompose
                                                          (MSigmaHCOL.MSHeUnion
                                                          (proj2_sig jf0))
                                                          (MSigmaHCOL.MSHEmbed
                                                          (h_index_map_compose_range_bound
                                                          (GathH_jn_domain_bound 
                                                          (` jf) 2 
                                                          (proj2_sig jf))
                                                          (h_bound_second_half 1 4)
                                                          (` jf0) 
                                                          (proj2_sig jf0)))))))))
     : Common.my_projT1
         {|
         Common.my_projT1 := vector CarrierA 3 → MSigmaHCOL.MSHOperator;
         Common.my_projT2 := λ a : vector CarrierA 3, MSigmaHCOL.MSHCompose
                                                        MSigmaHCOL.MSHBinOp
                                                        (MSigmaHCOL.MHTSUMUnion plus
                                                          (MSigmaHCOL.MSHCompose
                                                          (MSigmaHCOL.MSHeUnion
                                                          (le_S (le_n 1)))
                                                          (MSigmaHCOL.MSHIReduction 0
                                                          (λ jf : FinNat 3, 
                                                          MSigmaHCOL.MSHCompose
                                                          (MSigmaHCOL.MSHCompose
                                                          MSigmaHCOL.MSHPointwise
                                                          (MSigmaHCOL.MSHInductor
                                                          (` jf) 1))
                                                          (MSigmaHCOL.MSHEmbed
                                                          (GathH1_domain_bound_to_base_bound
                                                          (h_bound_first_half 1 4))))))
                                                          (MSigmaHCOL.MSHCompose
                                                          (MSigmaHCOL.MSHeUnion
                                                          (le_n 2))
                                                          (MSigmaHCOL.MSHIReduction 0
                                                          (λ jf : FinNat 2, 
                                                          MSigmaHCOL.MSHCompose
                                                          MSigmaHCOL.MSHBinOp
                                                          (MSigmaHCOL.MSHIUnion
                                                          (λ jf0 : FinNat 2, 
                                                          MSigmaHCOL.MSHCompose
                                                          (MSigmaHCOL.MSHeUnion
                                                          (proj2_sig jf0))
                                                          (MSigmaHCOL.MSHEmbed
                                                          (h_index_map_compose_range_bound
                                                          (GathH_jn_domain_bound 
                                                          (` jf) 2 
                                                          (proj2_sig jf))
                                                          (h_bound_second_half 1 4)
                                                          (` jf0) 
                                                          (proj2_sig jf0))))))))) |}



dynwin_MSHCOL1 = 
fun a : VectorDef.t CarrierA (S (S (S O))) =>
@MSigmaHCOL.MSHCompose (Init.Nat.add (S O) (S (S (S (S O)))))
  (Init.Nat.add (S O) (S O)) (S O)
  (@MSigmaHCOL.MSHBinOp (S O)
     (@IgnoreIndex2 CarrierA (@sig nat (fun n : nat => Peano.lt n (S O))) Zless)
     (@Reflexive_partial_app_morphism (forall (_ : CarrierA) (_ : CarrierA), CarrierA)
        (forall (_ : @sig nat (fun n : nat => Peano.lt n (S O))) 
           (_ : CarrierA) (_ : CarrierA), CarrierA)
        (@respectful CarrierA (forall _ : CarrierA, CarrierA)
           (@equiv CarrierA CarrierAe)
           (@equiv (forall _ : CarrierA, CarrierA)
              (@ext_equiv CarrierA CarrierAe CarrierA CarrierAe)))
        (@respectful (@sig nat (fun n : nat => Peano.lt n (S O)))
           (forall (_ : CarrierA) (_ : CarrierA), CarrierA)
           (@equiv (@sig nat (fun n : nat => Peano.lt n (S O)))
              (@Sig_Equiv nat peano_naturals.nat_equiv
                 (fun n : nat => Peano.lt n (S O))))
           (@respectful CarrierA (forall _ : CarrierA, CarrierA)
              (@equiv CarrierA CarrierAe)
              (@respectful CarrierA CarrierA (@equiv CarrierA CarrierAe)
                 (@equiv CarrierA CarrierAe))))
        (@IgnoreIndex2 CarrierA (@sig nat (fun n : nat => Peano.lt n (S O))))
        (@IgnoreIndex2_proper CarrierA CarrierAe
           (@sig nat (fun n : nat => Peano.lt n (S O)))
           (@Sig_Equiv nat peano_naturals.nat_equiv (fun n : nat => Peano.lt n (S O))))
        Zless
        (@proper_proper_proxy (forall (_ : CarrierA) (_ : CarrierA), CarrierA) Zless
           (@respectful CarrierA (forall _ : CarrierA, CarrierA)
              (@equiv CarrierA CarrierAe)
              (@equiv (forall _ : CarrierA, CarrierA)
                 (@ext_equiv CarrierA CarrierAe CarrierA CarrierAe))) Zless_proper)))
  (@MSigmaHCOL.MHTSUMUnion (Init.Nat.add (S O) (S (S (S (S O))))) 
     (S (S O)) (@plus CarrierA CarrierAplus)
     (@MSigmaHCOL.MSHCompose (Init.Nat.add (S O) (S (S (S (S O))))) 
        (S O) (S (S O))
        (@MSigmaHCOL.MSHeUnion (S (S O)) O (@le_S (S O) (S O) (le_n (S O))))
        (@MSigmaHCOL.MSHIReduction (Init.Nat.add (S O) (S (S (S (S O))))) 
           (S O) (S (S (S O))) (@zero CarrierA CarrierAz) (@plus CarrierA CarrierAplus)
           CarrierAPlus_proper
           (fun jf : @sig nat (fun x : nat => Peano.lt x (S (S (S O)))) =>
            @MSigmaHCOL.MSHCompose (Init.Nat.add (S O) (S (S (S (S O))))) 
              (S O) (S O)
              (@MSigmaHCOL.MSHCompose (S O) (S O) (S O)
                 (@MSigmaHCOL.MSHPointwise (S O)
                    (@Fin1SwapIndex CarrierA (S (S (S O))) jf
                       (@mult_by_nth (S (S (S O))) a))
                    (@Reflexive_partial_app_morphism
                       (forall (_ : @sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                          (_ : CarrierA), CarrierA)
                       (forall (_ : @sig nat (fun x : nat => Peano.lt x (S O)))
                          (_ : CarrierA), CarrierA)
                       (@respectful
                          (@sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                          (forall _ : CarrierA, CarrierA)
                          (@equiv (@sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                             (@Sig_Equiv nat peano_naturals.nat_equiv
                                (fun x : nat => Peano.lt x (S (S (S O))))))
                          (@respectful CarrierA CarrierA (@equiv CarrierA CarrierAe)
                             (@equiv CarrierA CarrierAe)))
                       (@respectful (@sig nat (fun x : nat => Peano.lt x (S O)))
                          (forall _ : CarrierA, CarrierA)
                          (@equiv (@sig nat (fun x : nat => Peano.lt x (S O)))
                             (@Sig_Equiv nat peano_naturals.nat_equiv
                                (fun x : nat => Peano.lt x (S O))))
                          (@respectful CarrierA CarrierA (@equiv CarrierA CarrierAe)
                             (@equiv CarrierA CarrierAe)))
                       (@Fin1SwapIndex CarrierA (S (S (S O))) jf)
                       (@Reflexive_partial_app_morphism
                          (@sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                          (forall
                             (_ : forall
                                    (_ : @sig nat
                                           (fun x : nat => Peano.lt x (S (S (S O)))))
                                    (_ : CarrierA), CarrierA)
                             (_ : @sig nat (fun x : nat => Peano.lt x (S O)))
                             (_ : CarrierA), CarrierA)
                          (@equiv (@sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                             (@Sig_Equiv nat peano_naturals.nat_equiv
                                (fun x : nat => Peano.lt x (S (S (S O))))))
                          (@respectful
                             (forall
                                (_ : @sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                                (_ : CarrierA), CarrierA)
                             (forall (_ : @sig nat (fun x : nat => Peano.lt x (S O)))
                                (_ : CarrierA), CarrierA)
                             (@respectful
                                (@sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                                (forall _ : CarrierA, CarrierA)
                                (@equiv
                                   (@sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                                   (@Sig_Equiv nat peano_naturals.nat_equiv
                                      (fun x : nat => Peano.lt x (S (S (S O))))))
                                (@respectful CarrierA CarrierA
                                   (@equiv CarrierA CarrierAe)
                                   (@equiv CarrierA CarrierAe)))
                             (@respectful (@sig nat (fun x : nat => Peano.lt x (S O)))
                                (forall _ : CarrierA, CarrierA)
                                (@equiv (@sig nat (fun x : nat => Peano.lt x (S O)))
                                   (@Sig_Equiv nat peano_naturals.nat_equiv
                                      (fun x : nat => Peano.lt x (S O))))
                                (@respectful CarrierA CarrierA
                                   (@equiv CarrierA CarrierAe)
                                   (@equiv CarrierA CarrierAe))))
                          (@Fin1SwapIndex CarrierA (S (S (S O))))
                          (@Fin1SwapIndex_proper CarrierA CarrierAe (S (S (S O)))) jf
                          (@reflexive_proper_proxy
                             (@sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                             (@equiv
                                (@sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                                (@Sig_Equiv nat peano_naturals.nat_equiv
                                   (fun x : nat => Peano.lt x (S (S (S O))))))
                             (@Equivalence_Reflexive
                                (@sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                                (@equiv
                                   (@sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                                   (@Sig_Equiv nat peano_naturals.nat_equiv
                                      (fun x : nat => Peano.lt x (S (S (S O))))))
                                (@abstract_algebra.setoid_eq
                                   (@sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                                   (@Sig_Equiv nat peano_naturals.nat_equiv
                                      (fun x : nat => Peano.lt x (S (S (S O)))))
                                   (@setoids.sig_setoid nat peano_naturals.nat_equiv
                                      (@abstract_algebra.sg_setoid nat
                                         peano_naturals.nat_equiv
                                         (@meet_is_sg_op nat
                                            (@minmax.min nat
                                               (@le nat peano_naturals.nat_le)
                                               (@peano_naturals.nat_le_dec)))
                                         (@abstract_algebra.comsg_setoid nat
                                            peano_naturals.nat_equiv
                                            (@meet_is_sg_op nat
                                               (@minmax.min nat
                                                  (@le nat peano_naturals.nat_le)
                                                  (@peano_naturals.nat_le_dec)))
                                            (@abstract_algebra.semilattice_sg nat
                                               peano_naturals.nat_equiv
                                               (@meet_is_sg_op nat
                                                  (@minmax.min nat
                                                     (@le nat peano_naturals.nat_le)
                                                     (@peano_naturals.nat_le_dec)))
                                               (@abstract_algebra.meet_semilattice nat
                                                  peano_naturals.nat_equiv
                                                  (@minmax.min nat
                                                     (@le nat peano_naturals.nat_le)
                                                     (@peano_naturals.nat_le_dec))
                                                  (@abstract_algebra.lattice_meet nat
                                                     peano_naturals.nat_equiv
                                                     (@minmax.max nat
                                                        (@le nat peano_naturals.nat_le)
                                                        (@peano_naturals.nat_le_dec))
                                                     (@minmax.min nat
                                                        (@le nat peano_naturals.nat_le)
                                                        (@peano_naturals.nat_le_dec))
                                                     (@abstract_algebra.distr_lattice_lattice
                                                        nat peano_naturals.nat_equiv
                                                        (@minmax.max nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec))
                                                        (@minmax.min nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec))
                                                        (@minmax.DistributiveLattice_instance_0
                                                          nat peano_naturals.nat_equiv
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@orders.le_total nat
                                                          peano_naturals.nat_equiv
                                                          (@strong_setoids.default_apart
                                                          nat peano_naturals.nat_equiv)
                                                          peano_naturals.nat_le
                                                          peano_naturals.nat_lt
                                                          (@semirings.FullPseudoOrder_instance_0
                                                          nat peano_naturals.nat_equiv
                                                          (...) peano_naturals.nat_plus
                                                          peano_naturals.nat_mult
                                                          peano_naturals.nat_0
                                                          peano_naturals.nat_1
                                                          peano_naturals.nat_le
                                                          peano_naturals.nat_lt
                                                          peano_naturals.FullPseudoSemiRingOrder_instance_0)
                                                          (@strong_setoids.default_apart_trivial
                                                          nat peano_naturals.nat_equiv)
                                                          peano_naturals.nat_dec)
                                                          (@peano_naturals.nat_le_dec))))))))
                                      (fun x : nat => Peano.lt x (S (S (S O))))))) jf))
                       (@mult_by_nth (S (S (S O))) a)
                       (@proper_proper_proxy
                          (forall
                             (_ : @sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                             (_ : CarrierA), CarrierA) (@mult_by_nth (S (S (S O))) a)
                          (@respectful
                             (@sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                             (forall _ : CarrierA, CarrierA)
                             (@equiv
                                (@sig nat (fun x : nat => Peano.lt x (S (S (S O)))))
                                (@Sig_Equiv nat peano_naturals.nat_equiv
                                   (fun x : nat => Peano.lt x (S (S (S O))))))
                             (@respectful CarrierA CarrierA 
                                (@equiv CarrierA CarrierAe) 
                                (@equiv CarrierA CarrierAe)))
                          (@mult_by_nth_proper (S (S (S O))) a))))
                 (@MSigmaHCOL.MSHInductor
                    (@proj1_sig nat (fun x : nat => Peano.lt x (S (S (S O)))) jf)
                    (@mult CarrierA CarrierAmult)
                    (@abstract_algebra.sg_op_proper CarrierA CarrierAe CarrierAmult
                       (@abstract_algebra.monoid_semigroup CarrierA CarrierAe
                          CarrierAmult (@one_is_mon_unit CarrierA CarrierA1)
                          (@abstract_algebra.commonoid_mon CarrierA CarrierAe
                             CarrierAmult (@one_is_mon_unit CarrierA CarrierA1)
                             (@abstract_algebra.semimult_monoid CarrierA CarrierAe
                                CarrierAplus CarrierAmult CarrierAz CarrierA1
                                (@rings.Ring_Semi CarrierA CarrierAe CarrierAplus
                                   CarrierAmult CarrierAz CarrierA1 CarrierAneg
                                   CarrierAr))))) (@one CarrierA CarrierA1)))
              (@MSigmaHCOL.MSHEmbed (Init.Nat.add (S O) (S (S (S (S O))))) O
                 (@GathH1_domain_bound_to_base_bound
                    (Init.Nat.add (S O) (S (S (S (S O))))) O 
                    (S O) (h_bound_first_half (S O) (S (S (S (S O))))))))))
     (@MSigmaHCOL.MSHCompose (Init.Nat.add (S O) (S (S (S (S O))))) 
        (S O) (S (S O)) (@MSigmaHCOL.MSHeUnion (S (S O)) (S O) (le_n (S (S O))))
        (@MSigmaHCOL.MSHIReduction (Init.Nat.add (S O) (S (S (S (S O))))) 
           (S O) (S (S O)) (@zero CarrierA CarrierAz)
           (@minmax.max CarrierA CarrierAle CarrierAledec)
           (@abstract_algebra.sg_op_proper CarrierA CarrierAe
              (fun x y : CarrierA =>
               @snd CarrierA CarrierA
                 (@minmax.sort CarrierA CarrierAle CarrierAledec x y))
              (@abstract_algebra.comsg_setoid CarrierA CarrierAe
                 (fun x y : CarrierA =>
                  @snd CarrierA CarrierA
                    (@minmax.sort CarrierA CarrierAle CarrierAledec x y))
                 (@abstract_algebra.semilattice_sg CarrierA CarrierAe
                    (fun x y : CarrierA =>
                     @snd CarrierA CarrierA
                       (@minmax.sort CarrierA CarrierAle CarrierAledec x y))
                    (@abstract_algebra.join_semilattice CarrierA CarrierAe
                       (fun x y : CarrierA =>
                        @snd CarrierA CarrierA
                          (@minmax.sort CarrierA CarrierAle CarrierAledec x y))
                       (@abstract_algebra.lattice_join CarrierA CarrierAe
                          (fun x y : CarrierA =>
                           @snd CarrierA CarrierA
                             (@minmax.sort CarrierA CarrierAle CarrierAledec x y))
                          (@minmax.min CarrierA CarrierAle CarrierAledec)
                          (@abstract_algebra.distr_lattice_lattice CarrierA CarrierAe
                             (fun x y : CarrierA =>
                              @snd CarrierA CarrierA
                                (@minmax.sort CarrierA CarrierAle CarrierAledec x y))
                             (@minmax.min CarrierA CarrierAle CarrierAledec)
                             (@minmax.DistributiveLattice_instance_0 CarrierA CarrierAe
                                CarrierAle CarrierAto CarrierAledec)))))))
           (fun jf : @sig nat (fun x : nat => Peano.lt x (S (S O))) =>
            @MSigmaHCOL.MSHCompose (Init.Nat.add (S O) (S (S (S (S O)))))
              (Init.Nat.add (S O) (S O)) (S O)
              (@MSigmaHCOL.MSHBinOp (S O)
                 (fun (i : @sig nat (fun n : nat => Peano.lt n (S O)))
                    (a0 b : CarrierA) =>
                  @IgnoreIndex CarrierA (S O)
                    (@abs CarrierA CarrierAe CarrierAle CarrierAz CarrierAneg
                       CarrierAabs) i
                    (@Fin1SwapIndex2 CarrierA (S (S O)) jf
                       (@IgnoreIndex2 CarrierA
                          (@sig nat (fun x : nat => Peano.lt x (S (S O)))) sub) i a0 b))
                 (@FinNat_f1_over_g2_proper (S O)
                    (@IgnoreIndex CarrierA (S O)
                       (@abs CarrierA CarrierAe CarrierAle CarrierAz CarrierAneg
                          CarrierAabs))
                    (@Fin1SwapIndex2 CarrierA (S (S O)) jf
                       (@IgnoreIndex2 CarrierA
                          (@sig nat (fun x : nat => Peano.lt x (S (S O)))) sub))
                    (@Reflexive_partial_app_morphism (forall _ : CarrierA, CarrierA)
                       (forall (_ : @sig nat (fun x : nat => Peano.lt x (S O)))
                          (_ : CarrierA), CarrierA)
                       (@respectful CarrierA CarrierA (@equiv CarrierA CarrierAe)
                          (@equiv CarrierA CarrierAe))
                       (@respectful (@sig nat (fun x : nat => Peano.lt x (S O)))
                          (forall _ : CarrierA, CarrierA)
                          (@equiv (@sig nat (fun x : nat => Peano.lt x (S O)))
                             (@Sig_Equiv nat peano_naturals.nat_equiv
                                (fun x : nat => Peano.lt x (S O))))
                          (@respectful CarrierA CarrierA (@equiv CarrierA CarrierAe)
                             (@equiv CarrierA CarrierAe)))
                       (@IgnoreIndex CarrierA (S O))
                       (@IgnoredIndex_proper CarrierA CarrierAe (S O))
                       (@abs CarrierA CarrierAe CarrierAle CarrierAz CarrierAneg
                          CarrierAabs)
                       (@proper_proper_proxy (forall _ : CarrierA, CarrierA)
                          (@abs CarrierA CarrierAe CarrierAle CarrierAz CarrierAneg
                             CarrierAabs)
                          (@respectful CarrierA CarrierA (@equiv CarrierA CarrierAe)
                             (@equiv CarrierA CarrierAe))
                          (@abstract_algebra.sm_proper CarrierA CarrierA CarrierAe
                             CarrierAe
                             (@abs CarrierA CarrierAe CarrierAle CarrierAz CarrierAneg
                                CarrierAabs)
                             (@abs_Setoid_Morphism CarrierA CarrierAe CarrierAplus
                                CarrierAmult CarrierAz CarrierA1 CarrierAneg CarrierAr
                                CarrierAsetoid CarrierAle CarrierAto CarrierAabs))))
                    (@Reflexive_partial_app_morphism
                       (forall (_ : @sig nat (fun x : nat => Peano.lt x (S (S O))))
                          (_ : CarrierA) (_ : CarrierA), CarrierA)
                       (forall (_ : @sig nat (fun x : nat => Peano.lt x (S O)))
                          (_ : CarrierA) (_ : CarrierA), CarrierA)
                       (@respectful (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                          (forall (_ : CarrierA) (_ : CarrierA), CarrierA)
                          (@equiv (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                             (@Sig_Equiv nat peano_naturals.nat_equiv
                                (fun x : nat => Peano.lt x (S (S O)))))
                          (@respectful CarrierA (forall _ : CarrierA, CarrierA)
                             (@equiv CarrierA CarrierAe)
                             (@respectful CarrierA CarrierA 
                                (@equiv CarrierA CarrierAe) 
                                (@equiv CarrierA CarrierAe))))
                       (@respectful (@sig nat (fun x : nat => Peano.lt x (S O)))
                          (forall (_ : CarrierA) (_ : CarrierA), CarrierA)
                          (@equiv (@sig nat (fun x : nat => Peano.lt x (S O)))
                             (@Sig_Equiv nat peano_naturals.nat_equiv
                                (fun x : nat => Peano.lt x (S O))))
                          (@respectful CarrierA (forall _ : CarrierA, CarrierA)
                             (@equiv CarrierA CarrierAe)
                             (@respectful CarrierA CarrierA 
                                (@equiv CarrierA CarrierAe) 
                                (@equiv CarrierA CarrierAe))))
                       (@Fin1SwapIndex2 CarrierA (S (S O)) jf)
                       (@Reflexive_partial_app_morphism
                          (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                          (forall
                             (_ : forall
                                    (_ : @sig nat (fun x : nat => Peano.lt x (S (S O))))
                                    (_ : CarrierA) (_ : CarrierA), CarrierA)
                             (_ : @sig nat (fun x : nat => Peano.lt x (S O)))
                             (_ : CarrierA) (_ : CarrierA), CarrierA)
                          (@equiv (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                             (@Sig_Equiv nat peano_naturals.nat_equiv
                                (fun x : nat => Peano.lt x (S (S O)))))
                          (@respectful
                             (forall
                                (_ : @sig nat (fun x : nat => Peano.lt x (S (S O))))
                                (_ : CarrierA) (_ : CarrierA), CarrierA)
                             (forall (_ : @sig nat (fun x : nat => Peano.lt x (S O)))
                                (_ : CarrierA) (_ : CarrierA), CarrierA)
                             (@respectful
                                (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                (forall (_ : CarrierA) (_ : CarrierA), CarrierA)
                                (@equiv
                                   (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                   (@Sig_Equiv nat peano_naturals.nat_equiv
                                      (fun x : nat => Peano.lt x (S (S O)))))
                                (@respectful CarrierA (forall _ : CarrierA, CarrierA)
                                   (@equiv CarrierA CarrierAe)
                                   (@respectful CarrierA CarrierA
                                      (@equiv CarrierA CarrierAe)
                                      (@equiv CarrierA CarrierAe))))
                             (@respectful (@sig nat (fun x : nat => Peano.lt x (S O)))
                                (forall (_ : CarrierA) (_ : CarrierA), CarrierA)
                                (@equiv (@sig nat (fun x : nat => Peano.lt x (S O)))
                                   (@Sig_Equiv nat peano_naturals.nat_equiv
                                      (fun x : nat => Peano.lt x (S O))))
                                (@respectful CarrierA (forall _ : CarrierA, CarrierA)
                                   (@equiv CarrierA CarrierAe)
                                   (@respectful CarrierA CarrierA
                                      (@equiv CarrierA CarrierAe)
                                      (@equiv CarrierA CarrierAe)))))
                          (@Fin1SwapIndex2 CarrierA (S (S O)))
                          (@Fin1SwapIndex2_proper CarrierA CarrierAe (S (S O))) jf
                          (@reflexive_proper_proxy
                             (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                             (@equiv (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                (@Sig_Equiv nat peano_naturals.nat_equiv
                                   (fun x : nat => Peano.lt x (S (S O)))))
                             (@Equivalence_Reflexive
                                (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                (@equiv
                                   (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                   (@Sig_Equiv nat peano_naturals.nat_equiv
                                      (fun x : nat => Peano.lt x (S (S O)))))
                                (@abstract_algebra.setoid_eq
                                   (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                   (@Sig_Equiv nat peano_naturals.nat_equiv
                                      (fun x : nat => Peano.lt x (S (S O))))
                                   (@setoids.sig_setoid nat peano_naturals.nat_equiv
                                      (@abstract_algebra.sg_setoid nat
                                         peano_naturals.nat_equiv
                                         (@meet_is_sg_op nat
                                            (@minmax.min nat
                                               (@le nat peano_naturals.nat_le)
                                               (@peano_naturals.nat_le_dec)))
                                         (@abstract_algebra.comsg_setoid nat
                                            peano_naturals.nat_equiv
                                            (@meet_is_sg_op nat
                                               (@minmax.min nat
                                                  (@le nat peano_naturals.nat_le)
                                                  (@peano_naturals.nat_le_dec)))
                                            (@abstract_algebra.semilattice_sg nat
                                               peano_naturals.nat_equiv
                                               (@meet_is_sg_op nat
                                                  (@minmax.min nat
                                                     (@le nat peano_naturals.nat_le)
                                                     (@peano_naturals.nat_le_dec)))
                                               (@abstract_algebra.meet_semilattice nat
                                                  peano_naturals.nat_equiv
                                                  (@minmax.min nat
                                                     (@le nat peano_naturals.nat_le)
                                                     (@peano_naturals.nat_le_dec))
                                                  (@abstract_algebra.lattice_meet nat
                                                     peano_naturals.nat_equiv
                                                     (@minmax.max nat
                                                        (@le nat peano_naturals.nat_le)
                                                        (@peano_naturals.nat_le_dec))
                                                     (@minmax.min nat
                                                        (@le nat peano_naturals.nat_le)
                                                        (@peano_naturals.nat_le_dec))
                                                     (@abstract_algebra.distr_lattice_lattice
                                                        nat peano_naturals.nat_equiv
                                                        (@minmax.max nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec))
                                                        (@minmax.min nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec))
                                                        (@minmax.DistributiveLattice_instance_0
                                                          nat peano_naturals.nat_equiv
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@orders.le_total nat
                                                          peano_naturals.nat_equiv
                                                          (@strong_setoids.default_apart
                                                          nat peano_naturals.nat_equiv)
                                                          peano_naturals.nat_le
                                                          peano_naturals.nat_lt
                                                          (@semirings.FullPseudoOrder_instance_0
                                                          nat peano_naturals.nat_equiv
                                                          (...) peano_naturals.nat_plus
                                                          peano_naturals.nat_mult
                                                          peano_naturals.nat_0
                                                          peano_naturals.nat_1
                                                          peano_naturals.nat_le
                                                          peano_naturals.nat_lt
                                                          peano_naturals.FullPseudoSemiRingOrder_instance_0)
                                                          (@strong_setoids.default_apart_trivial
                                                          nat peano_naturals.nat_equiv)
                                                          peano_naturals.nat_dec)
                                                          (@peano_naturals.nat_le_dec))))))))
                                      (fun x : nat => Peano.lt x (S (S O)))))) jf))
                       (@IgnoreIndex2 CarrierA
                          (@sig nat (fun x : nat => Peano.lt x (S (S O)))) sub)
                       (@proper_proper_proxy
                          (forall (_ : @sig nat (fun x : nat => Peano.lt x (S (S O))))
                             (_ : CarrierA) (_ : CarrierA), CarrierA)
                          (@IgnoreIndex2 CarrierA
                             (@sig nat (fun x : nat => Peano.lt x (S (S O)))) sub)
                          (@respectful (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                             (forall (_ : CarrierA) (_ : CarrierA), CarrierA)
                             (@equiv (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                (@Sig_Equiv nat peano_naturals.nat_equiv
                                   (fun x : nat => Peano.lt x (S (S O)))))
                             (@respectful CarrierA (forall _ : CarrierA, CarrierA)
                                (@equiv CarrierA CarrierAe)
                                (@respectful CarrierA CarrierA
                                   (@equiv CarrierA CarrierAe)
                                   (@equiv CarrierA CarrierAe))))
                          (@Reflexive_partial_app_morphism
                             (forall (_ : CarrierA) (_ : CarrierA), CarrierA)
                             (forall
                                (_ : @sig nat (fun x : nat => Peano.lt x (S (S O))))
                                (_ : CarrierA) (_ : CarrierA), CarrierA)
                             (@respectful CarrierA (forall _ : CarrierA, CarrierA)
                                (@equiv CarrierA CarrierAe)
                                (@equiv (forall _ : CarrierA, CarrierA)
                                   (@ext_equiv CarrierA CarrierAe CarrierA CarrierAe)))
                             (@respectful
                                (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                (forall (_ : CarrierA) (_ : CarrierA), CarrierA)
                                (@equiv
                                   (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                   (@Sig_Equiv nat peano_naturals.nat_equiv
                                      (fun x : nat => Peano.lt x (S (S O)))))
                                (@respectful CarrierA (forall _ : CarrierA, CarrierA)
                                   (@equiv CarrierA CarrierAe)
                                   (@respectful CarrierA CarrierA
                                      (@equiv CarrierA CarrierAe)
                                      (@equiv CarrierA CarrierAe))))
                             (@IgnoreIndex2 CarrierA
                                (@sig nat (fun x : nat => Peano.lt x (S (S O)))))
                             (@IgnoreIndex2_proper CarrierA CarrierAe
                                (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                (@Sig_Equiv nat peano_naturals.nat_equiv
                                   (fun x : nat => Peano.lt x (S (S O))))) sub
                             (@proper_proper_proxy
                                (forall (_ : CarrierA) (_ : CarrierA), CarrierA) sub
                                (@respectful CarrierA (forall _ : CarrierA, CarrierA)
                                   (@equiv CarrierA CarrierAe)
                                   (@equiv (forall _ : CarrierA, CarrierA)
                                      (@ext_equiv CarrierA CarrierAe CarrierA CarrierAe)))
                                CarrierA_sub_proper))))))
              (@MSigmaHCOL.MSHIUnion (Init.Nat.add (S O) (S (S (S (S O))))) 
                 (S (S O)) (S (S O))
                 (fun jf0 : @sig nat (fun x : nat => Peano.lt x (S (S O))) =>
                  @MSigmaHCOL.MSHCompose (Init.Nat.add (S O) (S (S (S (S O))))) 
                    (S O) (S (S O))
                    (@MSigmaHCOL.MSHeUnion (S (S O))
                       (@proj1_sig nat (fun x : nat => Peano.lt x (S (S O))) jf0)
                       (@proj2_sig nat (fun x : nat => Peano.lt x (S (S O))) jf0))
                    (@MSigmaHCOL.MSHEmbed (Init.Nat.add (S O) (S (S (S (S O)))))
                       (Init.Nat.add
                          (Init.Nat.add (S O)
                             (Init.Nat.mul
                                (@proj1_sig nat (fun x : nat => Peano.lt x (S (S O)))
                                   jf) (S O)))
                          (Init.Nat.mul
                             (@proj1_sig nat (fun x : nat => Peano.lt x (S (S O))) jf0)
                             (Init.Nat.mul (S (S O)) (S O))))
                       (@h_index_map_compose_range_bound
                          (Init.Nat.add (S O) (S (S (S (S O))))) 
                          (S (S O)) (Init.Nat.add (S (S O)) (S (S O)))
                          (@proj1_sig nat (fun x : nat => Peano.lt x (S (S O))) jf)
                          (S O) (S (S O)) (S O)
                          (GathH_jn_domain_bound
                             (@proj1_sig nat (fun x : nat => Peano.lt x (S (S O))) jf)
                             (S (S O))
                             (@proj2_sig nat (fun x : nat => Peano.lt x (S (S O))) jf))
                          (h_bound_second_half (S O) (S (S (S (S O)))))
                          (@proj1_sig nat (fun x : nat => Peano.lt x (S (S O))) jf0)
                          (@proj2_sig nat (fun x : nat => Peano.lt x (S (S O))) jf0)))))))))
     : Common.my_projT1
         (Common.existT_typed_term
            (forall _ : VectorDef.t CarrierA (S (S (S O))),
             @MSigmaHCOL.MSHOperator (Init.Nat.add (S O) (S (S (S (S O))))) (S O))
            (fun a : VectorDef.t CarrierA (S (S (S O))) =>
             @MSigmaHCOL.MSHCompose (Init.Nat.add (S O) (S (S (S (S O)))))
               (Init.Nat.add (S O) (S O)) (S O)
               (@MSigmaHCOL.MSHBinOp (S O)
                  (@IgnoreIndex2 CarrierA (@sig nat (fun n : nat => Peano.lt n (S O)))
                     Zless)
                  (@Reflexive_partial_app_morphism
                     (forall (_ : CarrierA) (_ : CarrierA), CarrierA)
                     (forall (_ : @sig nat (fun n : nat => Peano.lt n (S O)))
                        (_ : CarrierA) (_ : CarrierA), CarrierA)
                     (@respectful CarrierA (forall _ : CarrierA, CarrierA)
                        (@equiv CarrierA CarrierAe)
                        (@equiv (forall _ : CarrierA, CarrierA)
                           (@ext_equiv CarrierA CarrierAe CarrierA CarrierAe)))
                     (@respectful (@sig nat (fun n : nat => Peano.lt n (S O)))
                        (forall (_ : CarrierA) (_ : CarrierA), CarrierA)
                        (@equiv (@sig nat (fun n : nat => Peano.lt n (S O)))
                           (@Sig_Equiv nat peano_naturals.nat_equiv
                              (fun n : nat => Peano.lt n (S O))))
                        (@respectful CarrierA (forall _ : CarrierA, CarrierA)
                           (@equiv CarrierA CarrierAe)
                           (@respectful CarrierA CarrierA (@equiv CarrierA CarrierAe)
                              (@equiv CarrierA CarrierAe))))
                     (@IgnoreIndex2 CarrierA
                        (@sig nat (fun n : nat => Peano.lt n (S O))))
                     (@IgnoreIndex2_proper CarrierA CarrierAe
                        (@sig nat (fun n : nat => Peano.lt n (S O)))
                        (@Sig_Equiv nat peano_naturals.nat_equiv
                           (fun n : nat => Peano.lt n (S O)))) Zless
                     (@proper_proper_proxy
                        (forall (_ : CarrierA) (_ : CarrierA), CarrierA) Zless
                        (@respectful CarrierA (forall _ : CarrierA, CarrierA)
                           (@equiv CarrierA CarrierAe)
                           (@equiv (forall _ : CarrierA, CarrierA)
                              (@ext_equiv CarrierA CarrierAe CarrierA CarrierAe)))
                        Zless_proper)))
               (@MSigmaHCOL.MHTSUMUnion (Init.Nat.add (S O) (S (S (S (S O)))))
                  (S (S O)) (@plus CarrierA CarrierAplus)
                  (@MSigmaHCOL.MSHCompose (Init.Nat.add (S O) (S (S (S (S O))))) 
                     (S O) (S (S O))
                     (@MSigmaHCOL.MSHeUnion (S (S O)) O
                        (@le_S (S O) (S O) (le_n (S O))))
                     (@MSigmaHCOL.MSHIReduction (Init.Nat.add (S O) (S (S (S (S O)))))
                        (S O) (S (S (S O))) (@zero CarrierA CarrierAz)
                        (@plus CarrierA CarrierAplus) CarrierAPlus_proper
                        (fun jf : @sig nat (fun x : nat => Peano.lt x (S (S (S O)))) =>
                         @MSigmaHCOL.MSHCompose (Init.Nat.add (S O) (S (S (S (S O)))))
                           (S O) (S O)
                           (@MSigmaHCOL.MSHCompose (S O) (S O) 
                              (S O)
                              (@MSigmaHCOL.MSHPointwise (S O)
                                 (@Fin1SwapIndex CarrierA (S (S (S O))) jf
                                    (@mult_by_nth (S (S (S O))) a))
                                 (@Reflexive_partial_app_morphism
                                    (forall
                                       (_ : @sig nat
                                              (fun x : nat => Peano.lt x (S (S (S O)))))
                                       (_ : CarrierA), CarrierA)
                                    (forall
                                       (_ : @sig nat (fun x : nat => Peano.lt x (S O)))
                                       (_ : CarrierA), CarrierA)
                                    (@respectful
                                       (@sig nat
                                          (fun x : nat => Peano.lt x (S (S (S O)))))
                                       (forall _ : CarrierA, CarrierA)
                                       (@equiv
                                          (@sig nat
                                             (fun x : nat => Peano.lt x (S (S (S O)))))
                                          (@Sig_Equiv nat peano_naturals.nat_equiv
                                             (fun x : nat => Peano.lt x (S (S (S O))))))
                                       (@respectful CarrierA CarrierA
                                          (@equiv CarrierA CarrierAe)
                                          (@equiv CarrierA CarrierAe)))
                                    (@respectful
                                       (@sig nat (fun x : nat => Peano.lt x (S O)))
                                       (forall _ : CarrierA, CarrierA)
                                       (@equiv
                                          (@sig nat (fun x : nat => Peano.lt x (S O)))
                                          (@Sig_Equiv nat peano_naturals.nat_equiv
                                             (fun x : nat => Peano.lt x (S O))))
                                       (@respectful CarrierA CarrierA
                                          (@equiv CarrierA CarrierAe)
                                          (@equiv CarrierA CarrierAe)))
                                    (@Fin1SwapIndex CarrierA (S (S (S O))) jf)
                                    (@Reflexive_partial_app_morphism
                                       (@sig nat
                                          (fun x : nat => Peano.lt x (S (S (S O)))))
                                       (forall
                                          (_ : forall
                                                 (_ : @sig nat
                                                        (fun x : nat =>
                                                         Peano.lt x (S (S (S O)))))
                                                 (_ : CarrierA), CarrierA)
                                          (_ : @sig nat
                                                 (fun x : nat => Peano.lt x (S O)))
                                          (_ : CarrierA), CarrierA)
                                       (@equiv
                                          (@sig nat
                                             (fun x : nat => Peano.lt x (S (S (S O)))))
                                          (@Sig_Equiv nat peano_naturals.nat_equiv
                                             (fun x : nat => Peano.lt x (S (S (S O))))))
                                       (@respectful
                                          (forall
                                             (_ : @sig nat
                                                    (fun x : nat =>
                                                     Peano.lt x (S (S (S O)))))
                                             (_ : CarrierA), CarrierA)
                                          (forall
                                             (_ : @sig nat
                                                    (fun x : nat => Peano.lt x (S O)))
                                             (_ : CarrierA), CarrierA)
                                          (@respectful
                                             (@sig nat
                                                (fun x : nat =>
                                                 Peano.lt x (S (S (S O)))))
                                             (forall _ : CarrierA, CarrierA)
                                             (@equiv
                                                (@sig nat
                                                   (fun x : nat =>
                                                    Peano.lt x (S (S (S O)))))
                                                (@Sig_Equiv nat
                                                   peano_naturals.nat_equiv
                                                   (fun x : nat =>
                                                    Peano.lt x (S (S (S O))))))
                                             (@respectful CarrierA CarrierA
                                                (@equiv CarrierA CarrierAe)
                                                (@equiv CarrierA CarrierAe)))
                                          (@respectful
                                             (@sig nat
                                                (fun x : nat => Peano.lt x (S O)))
                                             (forall _ : CarrierA, CarrierA)
                                             (@equiv
                                                (@sig nat
                                                   (fun x : nat => Peano.lt x (S O)))
                                                (@Sig_Equiv nat
                                                   peano_naturals.nat_equiv
                                                   (fun x : nat => Peano.lt x (S O))))
                                             (@respectful CarrierA CarrierA
                                                (@equiv CarrierA CarrierAe)
                                                (@equiv CarrierA CarrierAe))))
                                       (@Fin1SwapIndex CarrierA (S (S (S O))))
                                       (@Fin1SwapIndex_proper CarrierA CarrierAe
                                          (S (S (S O)))) jf
                                       (@reflexive_proper_proxy
                                          (@sig nat
                                             (fun x : nat => Peano.lt x (S (S (S O)))))
                                          (@equiv
                                             (@sig nat
                                                (fun x : nat =>
                                                 Peano.lt x (S (S (S O)))))
                                             (@Sig_Equiv nat peano_naturals.nat_equiv
                                                (fun x : nat =>
                                                 Peano.lt x (S (S (S O))))))
                                          (@Equivalence_Reflexive
                                             (@sig nat
                                                (fun x : nat =>
                                                 Peano.lt x (S (S (S O)))))
                                             (@equiv
                                                (@sig nat
                                                   (fun x : nat =>
                                                    Peano.lt x (S (S (S O)))))
                                                (@Sig_Equiv nat
                                                   peano_naturals.nat_equiv
                                                   (fun x : nat =>
                                                    Peano.lt x (S (S (S O))))))
                                             (@abstract_algebra.setoid_eq
                                                (@sig nat
                                                   (fun x : nat =>
                                                    Peano.lt x (S (S (S O)))))
                                                (@Sig_Equiv nat
                                                   peano_naturals.nat_equiv
                                                   (fun x : nat =>
                                                    Peano.lt x (S (S (S O)))))
                                                (@setoids.sig_setoid nat
                                                   peano_naturals.nat_equiv
                                                   (@abstract_algebra.sg_setoid nat
                                                      peano_naturals.nat_equiv
                                                      (@meet_is_sg_op nat
                                                         (@minmax.min nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec)))
                                                      (@abstract_algebra.comsg_setoid
                                                         nat peano_naturals.nat_equiv
                                                         (@meet_is_sg_op nat
                                                          (@minmax.min nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec)))
                                                         (@abstract_algebra.semilattice_sg
                                                          nat peano_naturals.nat_equiv
                                                          (@meet_is_sg_op nat
                                                          (@minmax.min nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec)))
                                                          (@abstract_algebra.meet_semilattice
                                                          nat peano_naturals.nat_equiv
                                                          (@minmax.min nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec))
                                                          (@abstract_algebra.lattice_meet
                                                          nat peano_naturals.nat_equiv
                                                          (@minmax.max nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec))
                                                          (@minmax.min nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec))
                                                          (@abstract_algebra.distr_lattice_lattice
                                                          nat peano_naturals.nat_equiv
                                                          (@minmax.max nat (...) (...))
                                                          (@minmax.min nat (...) (...))
                                                          (@minmax.DistributiveLattice_instance_0
                                                          nat peano_naturals.nat_equiv
                                                          (...) 
                                                          (...) 
                                                          (...))))))))
                                                   (fun x : nat =>
                                                    Peano.lt x (S (S (S O))))))) jf))
                                    (@mult_by_nth (S (S (S O))) a)
                                    (@proper_proper_proxy
                                       (forall
                                          (_ : @sig nat
                                                 (fun x : nat =>
                                                  Peano.lt x (S (S (S O)))))
                                          (_ : CarrierA), CarrierA)
                                       (@mult_by_nth (S (S (S O))) a)
                                       (@respectful
                                          (@sig nat
                                             (fun x : nat => Peano.lt x (S (S (S O)))))
                                          (forall _ : CarrierA, CarrierA)
                                          (@equiv
                                             (@sig nat
                                                (fun x : nat =>
                                                 Peano.lt x (S (S (S O)))))
                                             (@Sig_Equiv nat peano_naturals.nat_equiv
                                                (fun x : nat =>
                                                 Peano.lt x (S (S (S O))))))
                                          (@respectful CarrierA CarrierA
                                             (@equiv CarrierA CarrierAe)
                                             (@equiv CarrierA CarrierAe)))
                                       (@mult_by_nth_proper (S (S (S O))) a))))
                              (@MSigmaHCOL.MSHInductor
                                 (@proj1_sig nat
                                    (fun x : nat => Peano.lt x (S (S (S O)))) jf)
                                 (@mult CarrierA CarrierAmult)
                                 (@abstract_algebra.sg_op_proper CarrierA CarrierAe
                                    CarrierAmult
                                    (@abstract_algebra.monoid_semigroup CarrierA
                                       CarrierAe CarrierAmult
                                       (@one_is_mon_unit CarrierA CarrierA1)
                                       (@abstract_algebra.commonoid_mon CarrierA
                                          CarrierAe CarrierAmult
                                          (@one_is_mon_unit CarrierA CarrierA1)
                                          (@abstract_algebra.semimult_monoid CarrierA
                                             CarrierAe CarrierAplus CarrierAmult
                                             CarrierAz CarrierA1
                                             (@rings.Ring_Semi CarrierA CarrierAe
                                                CarrierAplus CarrierAmult CarrierAz
                                                CarrierA1 CarrierAneg CarrierAr)))))
                                 (@one CarrierA CarrierA1)))
                           (@MSigmaHCOL.MSHEmbed (Init.Nat.add (S O) (S (S (S (S O))))) O
                              (@GathH1_domain_bound_to_base_bound
                                 (Init.Nat.add (S O) (S (S (S (S O))))) O 
                                 (S O) (h_bound_first_half (S O) (S (S (S (S O))))))))))
                  (@MSigmaHCOL.MSHCompose (Init.Nat.add (S O) (S (S (S (S O))))) 
                     (S O) (S (S O))
                     (@MSigmaHCOL.MSHeUnion (S (S O)) (S O) (le_n (S (S O))))
                     (@MSigmaHCOL.MSHIReduction (Init.Nat.add (S O) (S (S (S (S O)))))
                        (S O) (S (S O)) (@zero CarrierA CarrierAz)
                        (@minmax.max CarrierA CarrierAle CarrierAledec)
                        (@abstract_algebra.sg_op_proper CarrierA CarrierAe
                           (fun x y : CarrierA =>
                            @snd CarrierA CarrierA
                              (@minmax.sort CarrierA CarrierAle CarrierAledec x y))
                           (@abstract_algebra.comsg_setoid CarrierA CarrierAe
                              (fun x y : CarrierA =>
                               @snd CarrierA CarrierA
                                 (@minmax.sort CarrierA CarrierAle CarrierAledec x y))
                              (@abstract_algebra.semilattice_sg CarrierA CarrierAe
                                 (fun x y : CarrierA =>
                                  @snd CarrierA CarrierA
                                    (@minmax.sort CarrierA CarrierAle CarrierAledec x y))
                                 (@abstract_algebra.join_semilattice CarrierA CarrierAe
                                    (fun x y : CarrierA =>
                                     @snd CarrierA CarrierA
                                       (@minmax.sort CarrierA CarrierAle CarrierAledec
                                          x y))
                                    (@abstract_algebra.lattice_join CarrierA CarrierAe
                                       (fun x y : CarrierA =>
                                        @snd CarrierA CarrierA
                                          (@minmax.sort CarrierA CarrierAle
                                             CarrierAledec x y))
                                       (@minmax.min CarrierA CarrierAle CarrierAledec)
                                       (@abstract_algebra.distr_lattice_lattice
                                          CarrierA CarrierAe
                                          (fun x y : CarrierA =>
                                           @snd CarrierA CarrierA
                                             (@minmax.sort CarrierA CarrierAle
                                                CarrierAledec x y))
                                          (@minmax.min CarrierA CarrierAle
                                             CarrierAledec)
                                          (@minmax.DistributiveLattice_instance_0
                                             CarrierA CarrierAe CarrierAle CarrierAto
                                             CarrierAledec)))))))
                        (fun jf : @sig nat (fun x : nat => Peano.lt x (S (S O))) =>
                         @MSigmaHCOL.MSHCompose (Init.Nat.add (S O) (S (S (S (S O)))))
                           (Init.Nat.add (S O) (S O)) (S O)
                           (@MSigmaHCOL.MSHBinOp (S O)
                              (fun (i : @sig nat (fun n : nat => Peano.lt n (S O)))
                                 (a0 b : CarrierA) =>
                               @IgnoreIndex CarrierA (S O)
                                 (@abs CarrierA CarrierAe CarrierAle CarrierAz
                                    CarrierAneg CarrierAabs) i
                                 (@Fin1SwapIndex2 CarrierA 
                                    (S (S O)) jf
                                    (@IgnoreIndex2 CarrierA
                                       (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                       sub) i a0 b))
                              (@FinNat_f1_over_g2_proper (S O)
                                 (@IgnoreIndex CarrierA (S O)
                                    (@abs CarrierA CarrierAe CarrierAle CarrierAz
                                       CarrierAneg CarrierAabs))
                                 (@Fin1SwapIndex2 CarrierA 
                                    (S (S O)) jf
                                    (@IgnoreIndex2 CarrierA
                                       (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                       sub))
                                 (@Reflexive_partial_app_morphism
                                    (forall _ : CarrierA, CarrierA)
                                    (forall
                                       (_ : @sig nat (fun x : nat => Peano.lt x (S O)))
                                       (_ : CarrierA), CarrierA)
                                    (@respectful CarrierA CarrierA
                                       (@equiv CarrierA CarrierAe)
                                       (@equiv CarrierA CarrierAe))
                                    (@respectful
                                       (@sig nat (fun x : nat => Peano.lt x (S O)))
                                       (forall _ : CarrierA, CarrierA)
                                       (@equiv
                                          (@sig nat (fun x : nat => Peano.lt x (S O)))
                                          (@Sig_Equiv nat peano_naturals.nat_equiv
                                             (fun x : nat => Peano.lt x (S O))))
                                       (@respectful CarrierA CarrierA
                                          (@equiv CarrierA CarrierAe)
                                          (@equiv CarrierA CarrierAe)))
                                    (@IgnoreIndex CarrierA (S O))
                                    (@IgnoredIndex_proper CarrierA CarrierAe (S O))
                                    (@abs CarrierA CarrierAe CarrierAle CarrierAz
                                       CarrierAneg CarrierAabs)
                                    (@proper_proper_proxy
                                       (forall _ : CarrierA, CarrierA)
                                       (@abs CarrierA CarrierAe CarrierAle CarrierAz
                                          CarrierAneg CarrierAabs)
                                       (@respectful CarrierA CarrierA
                                          (@equiv CarrierA CarrierAe)
                                          (@equiv CarrierA CarrierAe))
                                       (@abstract_algebra.sm_proper CarrierA CarrierA
                                          CarrierAe CarrierAe
                                          (@abs CarrierA CarrierAe CarrierAle CarrierAz
                                             CarrierAneg CarrierAabs)
                                          (@abs_Setoid_Morphism CarrierA CarrierAe
                                             CarrierAplus CarrierAmult CarrierAz
                                             CarrierA1 CarrierAneg CarrierAr
                                             CarrierAsetoid CarrierAle CarrierAto
                                             CarrierAabs))))
                                 (@Reflexive_partial_app_morphism
                                    (forall
                                       (_ : @sig nat
                                              (fun x : nat => Peano.lt x (S (S O))))
                                       (_ : CarrierA) (_ : CarrierA), CarrierA)
                                    (forall
                                       (_ : @sig nat (fun x : nat => Peano.lt x (S O)))
                                       (_ : CarrierA) (_ : CarrierA), CarrierA)
                                    (@respectful
                                       (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                       (forall (_ : CarrierA) (_ : CarrierA), CarrierA)
                                       (@equiv
                                          (@sig nat
                                             (fun x : nat => Peano.lt x (S (S O))))
                                          (@Sig_Equiv nat peano_naturals.nat_equiv
                                             (fun x : nat => Peano.lt x (S (S O)))))
                                       (@respectful CarrierA
                                          (forall _ : CarrierA, CarrierA)
                                          (@equiv CarrierA CarrierAe)
                                          (@respectful CarrierA CarrierA
                                             (@equiv CarrierA CarrierAe)
                                             (@equiv CarrierA CarrierAe))))
                                    (@respectful
                                       (@sig nat (fun x : nat => Peano.lt x (S O)))
                                       (forall (_ : CarrierA) (_ : CarrierA), CarrierA)
                                       (@equiv
                                          (@sig nat (fun x : nat => Peano.lt x (S O)))
                                          (@Sig_Equiv nat peano_naturals.nat_equiv
                                             (fun x : nat => Peano.lt x (S O))))
                                       (@respectful CarrierA
                                          (forall _ : CarrierA, CarrierA)
                                          (@equiv CarrierA CarrierAe)
                                          (@respectful CarrierA CarrierA
                                             (@equiv CarrierA CarrierAe)
                                             (@equiv CarrierA CarrierAe))))
                                    (@Fin1SwapIndex2 CarrierA (S (S O)) jf)
                                    (@Reflexive_partial_app_morphism
                                       (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                       (forall
                                          (_ : forall
                                                 (_ : @sig nat
                                                        (fun x : nat =>
                                                         Peano.lt x (S (S O))))
                                                 (_ : CarrierA) 
                                                 (_ : CarrierA), CarrierA)
                                          (_ : @sig nat
                                                 (fun x : nat => Peano.lt x (S O)))
                                          (_ : CarrierA) (_ : CarrierA), CarrierA)
                                       (@equiv
                                          (@sig nat
                                             (fun x : nat => Peano.lt x (S (S O))))
                                          (@Sig_Equiv nat peano_naturals.nat_equiv
                                             (fun x : nat => Peano.lt x (S (S O)))))
                                       (@respectful
                                          (forall
                                             (_ : @sig nat
                                                    (fun x : nat =>
                                                     Peano.lt x (S (S O))))
                                             (_ : CarrierA) 
                                             (_ : CarrierA), CarrierA)
                                          (forall
                                             (_ : @sig nat
                                                    (fun x : nat => Peano.lt x (S O)))
                                             (_ : CarrierA) 
                                             (_ : CarrierA), CarrierA)
                                          (@respectful
                                             (@sig nat
                                                (fun x : nat => Peano.lt x (S (S O))))
                                             (forall (_ : CarrierA) (_ : CarrierA),
                                              CarrierA)
                                             (@equiv
                                                (@sig nat
                                                   (fun x : nat => Peano.lt x (S (S O))))
                                                (@Sig_Equiv nat
                                                   peano_naturals.nat_equiv
                                                   (fun x : nat => Peano.lt x (S (S O)))))
                                             (@respectful CarrierA
                                                (forall _ : CarrierA, CarrierA)
                                                (@equiv CarrierA CarrierAe)
                                                (@respectful CarrierA CarrierA
                                                   (@equiv CarrierA CarrierAe)
                                                   (@equiv CarrierA CarrierAe))))
                                          (@respectful
                                             (@sig nat
                                                (fun x : nat => Peano.lt x (S O)))
                                             (forall (_ : CarrierA) (_ : CarrierA),
                                              CarrierA)
                                             (@equiv
                                                (@sig nat
                                                   (fun x : nat => Peano.lt x (S O)))
                                                (@Sig_Equiv nat
                                                   peano_naturals.nat_equiv
                                                   (fun x : nat => Peano.lt x (S O))))
                                             (@respectful CarrierA
                                                (forall _ : CarrierA, CarrierA)
                                                (@equiv CarrierA CarrierAe)
                                                (@respectful CarrierA CarrierA
                                                   (@equiv CarrierA CarrierAe)
                                                   (@equiv CarrierA CarrierAe)))))
                                       (@Fin1SwapIndex2 CarrierA (S (S O)))
                                       (@Fin1SwapIndex2_proper CarrierA CarrierAe
                                          (S (S O))) jf
                                       (@reflexive_proper_proxy
                                          (@sig nat
                                             (fun x : nat => Peano.lt x (S (S O))))
                                          (@equiv
                                             (@sig nat
                                                (fun x : nat => Peano.lt x (S (S O))))
                                             (@Sig_Equiv nat peano_naturals.nat_equiv
                                                (fun x : nat => Peano.lt x (S (S O)))))
                                          (@Equivalence_Reflexive
                                             (@sig nat
                                                (fun x : nat => Peano.lt x (S (S O))))
                                             (@equiv
                                                (@sig nat
                                                   (fun x : nat => Peano.lt x (S (S O))))
                                                (@Sig_Equiv nat
                                                   peano_naturals.nat_equiv
                                                   (fun x : nat => Peano.lt x (S (S O)))))
                                             (@abstract_algebra.setoid_eq
                                                (@sig nat
                                                   (fun x : nat => Peano.lt x (S (S O))))
                                                (@Sig_Equiv nat
                                                   peano_naturals.nat_equiv
                                                   (fun x : nat => Peano.lt x (S (S O))))
                                                (@setoids.sig_setoid nat
                                                   peano_naturals.nat_equiv
                                                   (@abstract_algebra.sg_setoid nat
                                                      peano_naturals.nat_equiv
                                                      (@meet_is_sg_op nat
                                                         (@minmax.min nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec)))
                                                      (@abstract_algebra.comsg_setoid
                                                         nat peano_naturals.nat_equiv
                                                         (@meet_is_sg_op nat
                                                          (@minmax.min nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec)))
                                                         (@abstract_algebra.semilattice_sg
                                                          nat peano_naturals.nat_equiv
                                                          (@meet_is_sg_op nat
                                                          (@minmax.min nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec)))
                                                          (@abstract_algebra.meet_semilattice
                                                          nat peano_naturals.nat_equiv
                                                          (@minmax.min nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec))
                                                          (@abstract_algebra.lattice_meet
                                                          nat peano_naturals.nat_equiv
                                                          (@minmax.max nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec))
                                                          (@minmax.min nat
                                                          (@le nat
                                                          peano_naturals.nat_le)
                                                          (@peano_naturals.nat_le_dec))
                                                          (@abstract_algebra.distr_lattice_lattice
                                                          nat peano_naturals.nat_equiv
                                                          (@minmax.max nat (...) (...))
                                                          (@minmax.min nat (...) (...))
                                                          (@minmax.DistributiveLattice_instance_0
                                                          nat peano_naturals.nat_equiv
                                                          (...) 
                                                          (...) 
                                                          (...))))))))
                                                   (fun x : nat => Peano.lt x (S (S O))))))
                                          jf))
                                    (@IgnoreIndex2 CarrierA
                                       (@sig nat (fun x : nat => Peano.lt x (S (S O))))
                                       sub)
                                    (@proper_proper_proxy
                                       (forall
                                          (_ : @sig nat
                                                 (fun x : nat => Peano.lt x (S (S O))))
                                          (_ : CarrierA) (_ : CarrierA), CarrierA)
                                       (@IgnoreIndex2 CarrierA
                                          (@sig nat
                                             (fun x : nat => Peano.lt x (S (S O)))) sub)
                                       (@respectful
                                          (@sig nat
                                             (fun x : nat => Peano.lt x (S (S O))))
                                          (forall (_ : CarrierA) (_ : CarrierA),
                                           CarrierA)
                                          (@equiv
                                             (@sig nat
                                                (fun x : nat => Peano.lt x (S (S O))))
                                             (@Sig_Equiv nat peano_naturals.nat_equiv
                                                (fun x : nat => Peano.lt x (S (S O)))))
                                          (@respectful CarrierA
                                             (forall _ : CarrierA, CarrierA)
                                             (@equiv CarrierA CarrierAe)
                                             (@respectful CarrierA CarrierA
                                                (@equiv CarrierA CarrierAe)
                                                (@equiv CarrierA CarrierAe))))
                                       (@Reflexive_partial_app_morphism
                                          (forall (_ : CarrierA) (_ : CarrierA),
                                           CarrierA)
                                          (forall
                                             (_ : @sig nat
                                                    (fun x : nat =>
                                                     Peano.lt x (S (S O))))
                                             (_ : CarrierA) 
                                             (_ : CarrierA), CarrierA)
                                          (@respectful CarrierA
                                             (forall _ : CarrierA, CarrierA)
                                             (@equiv CarrierA CarrierAe)
                                             (@equiv (forall _ : CarrierA, CarrierA)
                                                (@ext_equiv CarrierA CarrierAe CarrierA
                                                   CarrierAe)))
                                          (@respectful
                                             (@sig nat
                                                (fun x : nat => Peano.lt x (S (S O))))
                                             (forall (_ : CarrierA) (_ : CarrierA),
                                              CarrierA)
                                             (@equiv
                                                (@sig nat
                                                   (fun x : nat => Peano.lt x (S (S O))))
                                                (@Sig_Equiv nat
                                                   peano_naturals.nat_equiv
                                                   (fun x : nat => Peano.lt x (S (S O)))))
                                             (@respectful CarrierA
                                                (forall _ : CarrierA, CarrierA)
                                                (@equiv CarrierA CarrierAe)
                                                (@respectful CarrierA CarrierA
                                                   (@equiv CarrierA CarrierAe)
                                                   (@equiv CarrierA CarrierAe))))
                                          (@IgnoreIndex2 CarrierA
                                             (@sig nat
                                                (fun x : nat => Peano.lt x (S (S O)))))
                                          (@IgnoreIndex2_proper CarrierA CarrierAe
                                             (@sig nat
                                                (fun x : nat => Peano.lt x (S (S O))))
                                             (@Sig_Equiv nat peano_naturals.nat_equiv
                                                (fun x : nat => Peano.lt x (S (S O)))))
                                          sub
                                          (@proper_proper_proxy
                                             (forall (_ : CarrierA) (_ : CarrierA),
                                              CarrierA) sub
                                             (@respectful CarrierA
                                                (forall _ : CarrierA, CarrierA)
                                                (@equiv CarrierA CarrierAe)
                                                (@equiv (forall _ : CarrierA, CarrierA)
                                                   (@ext_equiv CarrierA CarrierAe
                                                      CarrierA CarrierAe)))
                                             CarrierA_sub_proper))))))
                           (@MSigmaHCOL.MSHIUnion
                              (Init.Nat.add (S O) (S (S (S (S O))))) 
                              (S (S O)) (S (S O))
                              (fun jf0 : @sig nat (fun x : nat => Peano.lt x (S (S O)))
                               =>
                               @MSigmaHCOL.MSHCompose
                                 (Init.Nat.add (S O) (S (S (S (S O))))) 
                                 (S O) (S (S O))
                                 (@MSigmaHCOL.MSHeUnion (S (S O))
                                    (@proj1_sig nat
                                       (fun x : nat => Peano.lt x (S (S O))) jf0)
                                    (@proj2_sig nat
                                       (fun x : nat => Peano.lt x (S (S O))) jf0))
                                 (@MSigmaHCOL.MSHEmbed
                                    (Init.Nat.add (S O) (S (S (S (S O)))))
                                    (Init.Nat.add
                                       (Init.Nat.add (S O)
                                          (Init.Nat.mul
                                             (@proj1_sig nat
                                                (fun x : nat => Peano.lt x (S (S O)))
                                                jf) (S O)))
                                       (Init.Nat.mul
                                          (@proj1_sig nat
                                             (fun x : nat => Peano.lt x (S (S O))) jf0)
                                          (Init.Nat.mul (S (S O)) (S O))))
                                    (@h_index_map_compose_range_bound
                                       (Init.Nat.add (S O) (S (S (S (S O))))) 
                                       (S (S O)) (Init.Nat.add (S (S O)) (S (S O)))
                                       (@proj1_sig nat
                                          (fun x : nat => Peano.lt x (S (S O))) jf)
                                       (S O) (S (S O)) (S O)
                                       (GathH_jn_domain_bound
                                          (@proj1_sig nat
                                             (fun x : nat => Peano.lt x (S (S O))) jf)
                                          (S (S O))
                                          (@proj2_sig nat
                                             (fun x : nat => Peano.lt x (S (S O))) jf))
                                       (h_bound_second_half (S O) (S (S (S (S O)))))
                                       (@proj1_sig nat
                                          (fun x : nat => Peano.lt x (S (S O))) jf0)
                                       (@proj2_sig nat
                                          (fun x : nat => Peano.lt x (S (S O))) jf0)))))))))))
